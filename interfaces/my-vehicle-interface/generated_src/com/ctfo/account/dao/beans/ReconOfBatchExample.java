package com.ctfo.account.dao.beans;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReconOfBatchExample implements Serializable {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    private static final long serialVersionUID = 1L;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected List oredCriteria;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected int skipNum;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected int endNum;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected int limitNum;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public ReconOfBatchExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected ReconOfBatchExample(ReconOfBatchExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public static String tableName() {
        return "TB_UPP_CHECK_ACCOUNT_BATCH";
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public static String daoInterface() {
        return "com.ctfo.upp.accountservice.account.dao.ReconOfBatchDAO";
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void setSkipNum(int skipNum) {
        this.skipNum = skipNum;
        this.endNum = this.skipNum + this.limitNum +1;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public int getSkipNum() {
        return this.skipNum;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void setEndNum(int endNum) {
        this.endNum = endNum;
        this.limitNum = this.endNum - this.skipNum -1;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public int getEndNum() {
        return this.endNum;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public void setLimitNum(int limitNum) {
        this.limitNum = limitNum;
        this.endNum = this.skipNum + this.limitNum +1;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public int getLimitNum() {
        return this.limitNum;
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
     *
     * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
     */
    public static class Criteria implements Serializable {
        /**
         * This field was generated by Abator for iBATIS.
         * This field corresponds to the database table UPP.TB_UPP_CHECK_ACCOUNT_BATCH
         *
         * @abatorgenerated Mon Nov 03 13:56:54 CST 2014
         */
        private static final long serialVersionUID = 1L;

        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("ID =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("ID <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("ID >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("ID >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("ID <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("ID <=", value, "id");
            return this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("ID like", value, "id");
            return this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("ID not like", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("ID in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("ID not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("ID between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("ID not between", value1, value2, "id");
            return this;
        }

        public Criteria andCheckDateIsNull() {
            addCriterion("CHECK_DATE is null");
            return this;
        }

        public Criteria andCheckDateIsNotNull() {
            addCriterion("CHECK_DATE is not null");
            return this;
        }

        public Criteria andCheckDateEqualTo(Long value) {
            addCriterion("CHECK_DATE =", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateNotEqualTo(Long value) {
            addCriterion("CHECK_DATE <>", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateGreaterThan(Long value) {
            addCriterion("CHECK_DATE >", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateGreaterThanOrEqualTo(Long value) {
            addCriterion("CHECK_DATE >=", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateLessThan(Long value) {
            addCriterion("CHECK_DATE <", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateLessThanOrEqualTo(Long value) {
            addCriterion("CHECK_DATE <=", value, "checkDate");
            return this;
        }

        public Criteria andCheckDateIn(List values) {
            addCriterion("CHECK_DATE in", values, "checkDate");
            return this;
        }

        public Criteria andCheckDateNotIn(List values) {
            addCriterion("CHECK_DATE not in", values, "checkDate");
            return this;
        }

        public Criteria andCheckDateBetween(Long value1, Long value2) {
            addCriterion("CHECK_DATE between", value1, value2, "checkDate");
            return this;
        }

        public Criteria andCheckDateNotBetween(Long value1, Long value2) {
            addCriterion("CHECK_DATE not between", value1, value2, "checkDate");
            return this;
        }

        public Criteria andBatchNoIsNull() {
            addCriterion("BATCH_NO is null");
            return this;
        }

        public Criteria andBatchNoIsNotNull() {
            addCriterion("BATCH_NO is not null");
            return this;
        }

        public Criteria andBatchNoEqualTo(BigDecimal value) {
            addCriterion("BATCH_NO =", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoNotEqualTo(BigDecimal value) {
            addCriterion("BATCH_NO <>", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoGreaterThan(BigDecimal value) {
            addCriterion("BATCH_NO >", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("BATCH_NO >=", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoLessThan(BigDecimal value) {
            addCriterion("BATCH_NO <", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoLessThanOrEqualTo(BigDecimal value) {
            addCriterion("BATCH_NO <=", value, "batchNo");
            return this;
        }

        public Criteria andBatchNoIn(List values) {
            addCriterion("BATCH_NO in", values, "batchNo");
            return this;
        }

        public Criteria andBatchNoNotIn(List values) {
            addCriterion("BATCH_NO not in", values, "batchNo");
            return this;
        }

        public Criteria andBatchNoBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("BATCH_NO between", value1, value2, "batchNo");
            return this;
        }

        public Criteria andBatchNoNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("BATCH_NO not between", value1, value2, "batchNo");
            return this;
        }

        public Criteria andModtimeIsNull() {
            addCriterion("MODTIME is null");
            return this;
        }

        public Criteria andModtimeIsNotNull() {
            addCriterion("MODTIME is not null");
            return this;
        }

        public Criteria andModtimeEqualTo(Long value) {
            addCriterion("MODTIME =", value, "modtime");
            return this;
        }

        public Criteria andModtimeNotEqualTo(Long value) {
            addCriterion("MODTIME <>", value, "modtime");
            return this;
        }

        public Criteria andModtimeGreaterThan(Long value) {
            addCriterion("MODTIME >", value, "modtime");
            return this;
        }

        public Criteria andModtimeGreaterThanOrEqualTo(Long value) {
            addCriterion("MODTIME >=", value, "modtime");
            return this;
        }

        public Criteria andModtimeLessThan(Long value) {
            addCriterion("MODTIME <", value, "modtime");
            return this;
        }

        public Criteria andModtimeLessThanOrEqualTo(Long value) {
            addCriterion("MODTIME <=", value, "modtime");
            return this;
        }

        public Criteria andModtimeIn(List values) {
            addCriterion("MODTIME in", values, "modtime");
            return this;
        }

        public Criteria andModtimeNotIn(List values) {
            addCriterion("MODTIME not in", values, "modtime");
            return this;
        }

        public Criteria andModtimeBetween(Long value1, Long value2) {
            addCriterion("MODTIME between", value1, value2, "modtime");
            return this;
        }

        public Criteria andModtimeNotBetween(Long value1, Long value2) {
            addCriterion("MODTIME not between", value1, value2, "modtime");
            return this;
        }
    }
}