<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    					http://www.springframework.org/schema/aop 
    					http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="false" default-autowire="byName">
 
 
    <!-- ActiveMQ 连接工厂 :真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
 	<bean id="connectinFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
  		<!-- <property name="brokerURL" value="tcp://192.168.1.79:61616" /> -->
  		<property name="brokerURL" value="${SYSTEM_MQ_URL}" />
  		<property name="useAsyncSend" value="true"/>
 	</bean>
 	
 	<!-- Spring Caching连接工厂: Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
 	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
  		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
  		<property name="targetConnectionFactory" ref="connectinFactory"></property>
  		<!-- Session缓存数量 -->
  		<property name="sessionCacheSize" value="100"></property>
 	</bean>
 	 	
 	<!-- Spring JMS Template 配置JMS模版 -->
 	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
  		<property name="connectionFactory" ref="cachingConnectionFactory" />
 	</bean>
 	
 	<!-- 配置消息发送目的地方式 - Queue队列：仅有一个订阅者会收到消息，消息一旦被处理就不会存在队列中 -->
 	<bean id="notifyQueue" class="org.apache.activemq.command.ActiveMQQueue">	 
  		<constructor-arg value="${SYSTEM_PAY_MQ_QUEUE_DESTINATION}" />
  		<!-- <constructor-arg index="0" value="${SYSTEM_PAY_MQ_QUEUE_DESTINATION}"/> -->
 	</bean>
 	
 	<!-- 消息消费者 一般使用spring的MDP异步接收Queue模式 -->
 	<!-- 消息监听容器 -->
 	<bean id="queueContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
  		<property name="connectionFactory" ref="connectinFactory"/>
  		<property name="destination" ref="notifyQueue"/>
  		<property name="messageListener" ref="queueMessageConsumer"/>
  		<property name="sessionTransacted" value="true"/>  
 	</bean>
 	
 	
 	<!-- 配置消息发送目的地方式, 这个是主题目的地，一对多的：Topic主题 ：放入一个消息，所有订阅者都会收到 -->
	<!--<bean id="notifyTopic" class="org.apache.activemq.command.ActiveMQTopic">
  		<constructor-arg value="t.notify"></constructor-arg>
 	</bean>
 	 <bean id="topicMessageProducer" class="com.common.jms.TopicMessageProducer">
  		<property name="jmsTemplate" ref="jmsTemplate"></property>
  		<property name="notifyTopic" ref="notifyTopic"></property>
  	<property name="messageConverter" ref="messageConverter"></property>
 	</bean> -->
 	
 	<!-- 消息监听容器  发布订阅模式 -->
 	<!-- <bean id="topicContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
  		<property name="connectionFactory" ref="connectinFactory"></property>
  		<property name="destination" ref="notifyTopic"></property>
  		<property name="messageListener" ref="topicMessageListener"></property>
  		<property name="pubSubDomain" value="true" />
 	</bean> -->
 	
 	<!-- <bean id="topicMessageListener" class="com.common.jms.TopicMessageListener">
  		<property name="messageConverter" ref="messageConverter"></property>
 	</bean> -->
 	
 
</beans>